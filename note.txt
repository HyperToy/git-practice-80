Git 入門コマンドライン演習80

p.76 git push --set-upstream option がわからない。

SSH 接続で、git push するときに毎回 passphrase を求められるのが面倒だった。
https://parashuto.com/rriver/tools/github-push-asks-passphrase-every-time
このページの対処を実行してみたところ、一旦解決したらしい。
書いてある通りに以下のコマンドを、理解しないまま打った。
    ssh-add -K ~/.ssh/id_rsa

p.81 git switch <branch name>
    ブランチを、 <branch name> に切り替える。
    ブランチの切り替えは、これまでずっと checkout を使っていた。

p.82 git switch -c <new branch name>
    ブランチの作成と切り替えを同時に行う。
    これまでは git checkout -b <branch name> を使っていた。

p.84 git merge <branch name>
    現在いるブランチに、指定したブランチをマージする。

p.92 git diff --cached / git diff --staged
    ステージングエリアとローカルリポジトリとの差分を確認することができる。
    つけるオプションはどちらでもいいらしい（細かい違いがある？）

    git status で表示されるもの
        Changes to be committed:            ← インデックス（ステージング）エリア
        Changes not staged for commit:      ← ワーキングツリー
        Untracked files:                    ←　それ以外


p.93 git log --oneline
    コミットログを省略して、1コミット1行で表示するオプション。
    とても便利な一方で、適切なコミットメッセージが求められるなと思った。


p.108 
    git branch --merged
        現在のブランチにマージされているブランチを出力する
    git branch --no-merged
        現在のブランチにマージされていないブランチを出力する
    git branch -d <branch name> 
        指定したブランチを削除する（現在いるブランチにマージされていない場合は、警告が出て失敗する）
    git branch -D <branch name>
        指定したブランチを削除する（現在いるブランチにマージされていなくても、削除を実行する）


p.110
    git branch -m <branch before> <branch after>
        ブランチの名前を変更する。
        <branch before> を省略した場合、現在いるブランチの名前を変更する。
        すでに同名のブランチが存在する場合、変更は失敗する
    git branch -M <branch before> <branch after>
        ブランチの名前を変更する。
        すでに同名のブランチが存在する場合でも、変更を実行する。
        前に存在した同名のブランチは、存在が消える。

p.112
    git fetch <remote repository> <remote branch>
        リモートリポジトリのリモートブランチの情報をローカルにコピーする。
        リモートリポジトリの名前には、 大抵、origin というエイリアスが張られている。
    
    git fetch 
        リモートリポジトリ名とリモートブランチ名を省略した場合、リモートブランチの情報をすべてローカルにコピーする。

p.113 practice 20 特定のコミットを取り入れる
    マージする = コミットの集合を取り入れる
    cherry-pick = 特定のコミットのみを取り入れる

    cherry-pick によってコンフリクトが発生した場合、選択肢は2つ
        - git cherry-pick --abort コマンドで、取り込みを中止する
        - ファイル編集でコンフリクトを解消した後、 git add コマンドでステージングし、 git cherry-pick --continue コマンドで確定する
            （エディタが開くので、コミットメッセージを入力する）
    
    git cherry-pick <commit>
    git cherry-pick <start commit>..<end commit>
        始点として指定したコミットの、次のコミットの変更から取り入れられる。
    git cherry-pick <branch name>
    git cherry-pick --continue
    git cherry-pick --abort

p.117 演習21 コミットからブランチを作成する
    git branch <branch name> <commit>
    git switch -c <branch name> <commit>
        ブランチ名を指定しない場合は、 detouched HEAD という状態になるらしい。（詳細は後述）

        自分の理解が正しければ、編集履歴は、「コミット」を頂点、「コミットとコミットの前後関係」を辺とする有向グラフとして考えられる。
        それぞれの「コミット」は、「変更差分」もしくは「編集内容」で、コミットが辺で繋がることによって、「編集履歴」を形成している。
        「ブランチ」は、連なったり分岐したりしている「コミットのツリー」のいずれかの頂点を指している。
        通常の状態の HEAD は、いずれかのブランチを指している。
